platform :ios, "14.0"

project "Runner", {
  "Debug" => :debug,
  "Profile" => :release,
  "Release" => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join("..", "Flutter", "Generated.xcconfig"), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you are running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}"
end

require File.expand_path(File.join("packages", "flutter_tools", "bin", "podhelper"), flutter_root)

target "Runner" do
  use_frameworks!
  use_modular_headers!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
    
    target.build_configurations.each do |config|
      config.build_settings["IPHONEOS_DEPLOYMENT_TARGET"] = "14.0"
      
      # Remove -G flag from all possible locations
      if config.build_settings["OTHER_CFLAGS"].is_a?(Array)
        config.build_settings["OTHER_CFLAGS"].reject! { |flag| flag == "-G" }
      elsif config.build_settings["OTHER_CFLAGS"].is_a?(String)
        config.build_settings["OTHER_CFLAGS"] = config.build_settings["OTHER_CFLAGS"].split.reject { |flag| flag == "-G" }.join(" ")
      end
      
      # Remove from CFLAGS as well
      if config.build_settings["CFLAGS"].is_a?(Array)
        config.build_settings["CFLAGS"].reject! { |flag| flag == "-G" }
      elsif config.build_settings["CFLAGS"].is_a?(String)
        config.build_settings["CFLAGS"] = config.build_settings["CFLAGS"].to_s.split.reject { |flag| flag == "-G" }.join(" ")
      end
    end
    
    # Handle source files directly
    if target.respond_to?(:source_build_phase)
      target.source_build_phase.files.each do |file|
        if file.settings && file.settings["COMPILER_FLAGS"]
          flags = file.settings["COMPILER_FLAGS"].split
          flags.reject! { |flag| flag == "-G" || flag == "-GCC_WARN_INHIBIT_ALL_WARNINGS" }
          file.settings["COMPILER_FLAGS"] = flags.join(" ")
        end
      end
    end
  end
end
